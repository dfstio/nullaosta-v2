org: dfstio
app: nullaosta-bot
service: nullaosta-bot

plugins:
  - serverless-plugin-typescript
  - serverless-prune-plugin

provider:
  name: aws
  versionFunctions: false
  runtime: nodejs20.x
  region: eu-west-1
  logRetentionInDays: 7
  environment:
    BOT_TOKEN: ${file(./env.json):BOT_TOKEN, env:BOT_TOKEN}
    CHATGPT_TOKEN: ${file(./env.json):CHATGPT_TOKEN, env:CHATGPT_TOKEN}
    DYNAMODB_TABLE: ${file(./env.json):DYNAMODB_TABLE, env:DYNAMODB_TABLE}
    TASKS_TABLE: ${file(./env.json):TASKS_TABLE, env:TASKS_TABLE}
    FILES_TABLE: ${file(./env.json):FILES_TABLE, env:FILES_TABLE}
    HISTORY_TABLE: ${file(./env.json):HISTORY_TABLE, env:HISTORY_TABLE}
    HISTORY_HOURS: ${file(./env.json):HISTORY_HOURS, env:HISTORY_HOURS}
    HISTORY_CHARS: ${file(./env.json):HISTORY_CHARS, env:HISTORY_CHARS}
    BUCKET: ${file(./env.json):BUCKET_NAME, env:BUCKET_NAME}
    BUCKET_VOICEIN: ${file(./env.json):BUCKET_VOICEIN, env:BUCKET_VOICEIN}
    BUCKET_VOICEOUT: ${file(./env.json):BUCKET_VOICEOUT, env:BUCKET_VOICEOUT}
    VOICE_PIPELINEID: ${file(./env.json):VOICE_PIPELINEID, env:VOICE_PIPELINEID}
    SLS_ORG_TOKEN: ${file(./env.json):SLS_ORG_TOKEN, env:SLS_ORG_TOKEN}
    SUPPORT_CHAT: ${file(./env.json):SUPPORT_CHAT, env:SUPPORT_CHAT}
    BOTAPIAUTH: ${file(./env.json):BOTAPIAUTH, env:BOTAPIAUTH}
    CHATGPTPLUGINAUTH: ${file(./env.json):CHATGPTPLUGINAUTH, env:CHATGPTPLUGINAUTH}
    STORAGE_URL: ${file(./env.json):STORAGE_URL, env:STORAGE_URL}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ses:*"
        - lambda:InvokeFunction
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.HISTORY_TABLE}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:HeadObject
      Resource: "arn:aws:s3:::${self:provider.environment.BUCKET}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:HeadObject
      Resource: "arn:aws:s3:::${self:provider.environment.BUCKET_VOICEIN}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:HeadObject
        - s3:ListBucket
      Resource: "arn:aws:s3:::${self:provider.environment.BUCKET_VOICEOUT}/*"
    - Effect: Allow
      Action:
        - elastictranscoder:CreateJob
      Resource:
        - "arn:aws:elastictranscoder:${opt:region, self:provider.region}:*:pipeline/*"
        - "arn:aws:elastictranscoder:${opt:region, self:provider.region}:*:preset/*"
    - Effect: Allow
      Action:
        - polly:*
      Resource:
        - "*"

functions:
  send:
    handler: telegram.send
    timeout: 30
    memorySize: 512
    events:
      - http:
          path: send
          method: post
  ask:
    handler: ask.chatgpt
    timeout: 900
    memorySize: 256
  image:
    handler: ask.image
    timeout: 900
    memorySize: 512
  audio:
    handler: audio.transcribe
    timeout: 900
    memorySize: 512
  test:
    handler: test.cloud
    timeout: 300
    memorySize: 512
  tasks:
    handler: tasks.check
    timeout: 300
    memorySize: 192
    events:
      - schedule:
          rate: rate(60 minutes)
          enabled: true
          name: ts

resources:
  Resources:
    AnswersDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    TasksDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TASKS_TABLE}
    FilesDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: filename
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: filename
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.FILES_TABLE}
    HistoryDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: time
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: time
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.HISTORY_TABLE}

package:
  excludeDevDependencies: true
  exclude:
    - test/**
    - jest.config.js
    - tsconfig.json
    - tslint.json
    - env*.json
    - .travis.yml
    - .prettierrc
    - node_modules/aws-sdk/**

custom:
  s3Bucket: formbucket-${self:provider.environment.BUCKET}
